{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abdul\\\\Masa\\xFCst\\xFC\\\\01-starting-project\\\\src\\\\components\\\\store\\\\Store.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Context1 = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  setIsLoggedIn: () => {},\n  loginHandler: () => {\n    email, password;\n  }\n});\nconst loginHandler = (email, password) => {\n  // We should of course check email and password\n  // But it's just a dummy/ demo anyways\n  localStorage.setItem(\"statusLogin\", 1);\n  setIsLoggedIn(true);\n};\nexport const Store = props => {\n  _s();\n  //try export default\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    if (localStorage.getItem(\"statusLogin\") === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Context1.Provider, {\n      value: [isLoggedIn, setIsLoggedIn, loginHandler],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Store, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = Store;\nvar _c;\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Context1","createContext","isLoggedIn","setIsLoggedIn","loginHandler","email","password","localStorage","setItem","Store","props","_s","getItem","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Abdul/Masaüstü/01-starting-project/src/components/store/Store.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport const Context1 = React.createContext({\r\n  isLoggedIn: false,\r\n  setIsLoggedIn: () => {},\r\n  loginHandler: () => {\r\n    email, password;\r\n  },\r\n});\r\n\r\nconst loginHandler = (email, password) => {\r\n  // We should of course check email and password\r\n  // But it's just a dummy/ demo anyways\r\n  localStorage.setItem(\"statusLogin\", 1);\r\n  setIsLoggedIn(true);\r\n};\r\n\r\nexport const Store = (props) => {\r\n  //try export default\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"statusLogin\") === \"1\") {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Context1.Provider value={[isLoggedIn, setIsLoggedIn, loginHandler]}>\r\n        <div>{props.children}</div>\r\n      </Context1.Provider>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,OAAO,MAAMC,QAAQ,gBAAGP,KAAK,CAACQ,aAAa,CAAC;EAC1CC,UAAU,EAAE,KAAK;EACjBC,aAAa,EAAEA,CAAA,KAAM,CAAC,CAAC;EACvBC,YAAY,EAAEA,CAAA,KAAM;IAClBC,KAAK,EAAEC,QAAQ;EACjB;AACF,CAAC,CAAC;AAEF,MAAMF,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxC;EACA;EACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC;EACtCL,aAAa,CAAC,IAAI,CAAC;AACrB,CAAC;AAED,OAAO,MAAMM,KAAK,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACT,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,IAAIa,YAAY,CAACK,OAAO,CAAC,aAAa,CAAC,KAAK,GAAG,EAAE;MAC/CT,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA,CAAAE,SAAA;IAAAc,QAAA,eACEhB,OAAA,CAACG,QAAQ,CAACc,QAAQ;MAACC,KAAK,EAAE,CAACb,UAAU,EAAEC,aAAa,EAAEC,YAAY,CAAE;MAAAS,QAAA,eAClEhB,OAAA;QAAAgB,QAAA,EAAMH,KAAK,CAACG;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV;EAAC,gBACpB,CAAC;AAEP,CAAC;AAACR,EAAA,CAjBWF,KAAK;AAAAW,EAAA,GAALX,KAAK;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}